// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package provider

import (
	"errors"
	"fmt"
)

const (
	Unknown Provider = iota
	Aws
	Alibaba
	Azure
	Cloudflare
	Digitalocean
	Fastly
	Gcp
	Ibm
	Linode
	Oracle
	Ovh
	Scaleway
	Tencent
	Ucloud
	Vercel
	Akamai
)

var ErrInvalidProvider = errors.New("not a valid Provider")

const _ProviderName = "UnknownAwsAlibabaAzureCloudflareDigitaloceanFastlyGcpIbmLinodeOracleOvhScalewayTencentUcloudVercelAkamai"

var _ProviderMap = map[Provider]string{
	Unknown:      _ProviderName[0:7],
	Aws:          _ProviderName[7:10],
	Alibaba:      _ProviderName[10:17],
	Azure:        _ProviderName[17:22],
	Cloudflare:   _ProviderName[22:32],
	Digitalocean: _ProviderName[32:44],
	Fastly:       _ProviderName[44:50],
	Gcp:          _ProviderName[50:53],
	Ibm:          _ProviderName[53:56],
	Linode:       _ProviderName[56:62],
	Oracle:       _ProviderName[62:68],
	Ovh:          _ProviderName[68:71],
	Scaleway:     _ProviderName[71:79],
	Tencent:      _ProviderName[79:86],
	Ucloud:       _ProviderName[86:92],
	Vercel:       _ProviderName[92:98],
	Akamai:       _ProviderName[98:104],
}

// String implements the Stringer interface.
func (x Provider) String() string {
	if str, ok := _ProviderMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Provider(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Provider) IsValid() bool {
	_, ok := _ProviderMap[x]
	return ok
}

var _ProviderValue = map[string]Provider{
	_ProviderName[0:7]:    Unknown,
	_ProviderName[7:10]:   Aws,
	_ProviderName[10:17]:  Alibaba,
	_ProviderName[17:22]:  Azure,
	_ProviderName[22:32]:  Cloudflare,
	_ProviderName[32:44]:  Digitalocean,
	_ProviderName[44:50]:  Fastly,
	_ProviderName[50:53]:  Gcp,
	_ProviderName[53:56]:  Ibm,
	_ProviderName[56:62]:  Linode,
	_ProviderName[62:68]:  Oracle,
	_ProviderName[68:71]:  Ovh,
	_ProviderName[71:79]:  Scaleway,
	_ProviderName[79:86]:  Tencent,
	_ProviderName[86:92]:  Ucloud,
	_ProviderName[92:98]:  Vercel,
	_ProviderName[98:104]: Akamai,
}

// ParseProvider attempts to convert a string to a Provider.
func ParseProvider(name string) (Provider, error) {
	if x, ok := _ProviderValue[name]; ok {
		return x, nil
	}
	return Provider(0), fmt.Errorf("%s is %w", name, ErrInvalidProvider)
}

// MarshalText implements the text marshaller method.
func (x Provider) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Provider) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseProvider(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
